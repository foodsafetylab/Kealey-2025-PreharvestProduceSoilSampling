---
title: "Initial filtering"
execute:
  echo: false
  message: false
  warning: false
---

```{r, include=FALSE}
# Load functions in "common_code.R"
# at some point this should be moved into bookdown
source("src/common_code.R", local = knitr::knit_global())
```

Load phyloseq object to process, before filtering:

```{r}
physeq <- readRDS(file = "results/physeq.raw.RDS")
physeq.filtered <- physeq
physeq.filtered
```

These steps remove or subset the original data by:

1.  Selecting samples from the original to focus on
2.  Remove any possible bad/uninformative samples (with justification)
3.  Remove any taxa not found in the remaining samples after removing the above
4.  Remove artifacts
5.  Remove contaminants from cross-contamination (requires controls)
6.  Prune out low-count taxa

We save this file for alpha rarefaction, alpha diversity, and prevalence filtering/agglomeration

## Subset of data

Are we focusing on one particular subset of samples?

Not at the moment, so will skip the following step.

### Subset samples

No subsetting for now.

```{r}
# physeq.filtered <- subset_samples(physeq, SampleID != "M1_C14")
# physeq.filtered <- subset_samples(physeq.filtered, SampleID != "water")
# physeq.filtered
```

## Prune low count samples

Prune to sample with `sample_sums` \>1000.

```{r }
physeq.filtered <- prune_samples(sample_sums(physeq.filtered) > 1000, physeq.filtered)
physeq.filtered
```

This removed `r nrow(sample_data(physeq)) - nrow(sample_data(physeq.filtered))` samples, now has `r nrow(sample_data(physeq.filtered))` samples. Samples removed in this step are shown below:

```{r}
diff1<-setdiff(physeq@sam_data$SampleID, physeq.filtered@sam_data$SampleID)
#data.frame((physeq@sam_data)[diff1,2:6]) %>% kable()%>% kable_styling()
```

## Zero-count taxa

If we remove samples, there may be some taxa that are no longer present in the subset we have.

-   There are `r sum(taxa_sums(physeq.filtered) == 0)` taxa that has 0 count

```{r}
physeq.filtered <- subset_taxa(physeq.filtered, taxa_sums(physeq.filtered) > 0)
```

-   After removing these taxa (if any), we have `r ncol(otu_table(physeq.filtered))` taxa

## Removing artifacts

We need to remove ASVs that are likely artefactual, for example from host or from other sources. We should get rid of:

-   Unranked/unassigned <!-- -   Eukarya (kingdom): not for this dataset -->

### Unranked/unassigned

The RDP classifier and other classifiers will sometimes misclassify sequences that have very little sequence similarity to 16S based on the way it works; these tend to classify poorly by rank (NA or 'Unclassified' up to and sometimes including Domain/Kingdom).

What proportion of the ASVs are unassigned at each rank?

```{r}
taxtab <- tax_table(physeq.filtered)

# note this test checks if the rank is NA; if the rank is assigned 'Unclassified' modify the term here
ranks <- data.frame(apply(taxtab, 2, 
                          function(x) label_percent(accuracy = 0.01) (sum( x == "Unclassified" )/length(x) ) ))
colnames(ranks) <- c("Perc.Unclassified")
ranks %>% kable %>%
  kable_styling()
```

Quite a bit is unassigned at the Species level `r ranks[7,]` but this is normal. Genus and Family levels have less than `r max(ranks[5:6,])` unassigned. Phylum, Class and Order levels have less than `r max(ranks[1:3,])` unassigned.

How many Domain/Kingdom levels are there?

```{r }
data.frame(table(tax_table(physeq.filtered)[,'Domain'])) %>% setNames(c("Domain", "Count")) %>%
  kable() %>% kable_styling()

df = data.frame(table(tax_table(physeq.filtered)[,'Domain'])) %>% setNames(c("Domain", "Count"))
df.archaea = df[df$Domain == "Archaea",]
```

### Remove non-bacterial taxa

We have `r df.archaea$Count` Archaea. Let's remove that.

```{r }
physeq.filtered <- subset_taxa(physeq.filtered, Domain != "Archaea")

domain <- as.data.frame(tax_table(physeq.filtered)[,'Domain'])

data.frame(table(domain == "Archaea")) %>% setNames(c("Archaea", "Count")) %>%
  kable() %>% kable_styling()
```


### Unclassified taxa at the phylum

There are a few that are unclassified across almost all ranks; anything not classified at least to a phylum level are uninformative. We should go ahead and remove these.

How many Phylum are unassigned? (TRUE means these are unassigned)

```{r }
phy <- as.data.frame(tax_table(physeq.filtered)[,'Phylum'])

data.frame(table(phy == "Unclassified")) %>% setNames(c("Unclassified", "Count")) %>%
  kable() %>% kable_styling()
```

-   `r sum(phy$Phylum=="Unclassified")` unassigned Phylum. Export the unassigned sequences to a file.
    -   *results/unasn-sequences/unassigned-phylum-level.fna*
-   Subset those sequences that have assignments at least at the Phylum level.
-   Remove any sample that has 0 counts after the subset taxa

```{r}
unasn <- subset_taxa(physeq.filtered, Phylum == "Unclassified")
```

```{r}
dir.create(file.path('results/unasn-sequences'), showWarnings = FALSE, recursive = TRUE)
writeXStringSet(refseq(unasn),
                filepath = 'results/unasn-sequences/unassigned-phylum-level.fna',
                format = 'fasta')
```

```{r }
physeq.filtered <- subset_taxa(physeq.filtered, Phylum != "Unclassified")
physeq.filtered
```

### Eukaryotic sequences

After removing the unclassified phyla, the Eukaryotic reads are also removed as a result.

```{r }
table(tax_table(physeq.filtered)[,'Domain'])['Eukaryota']
```

<!-- ```{r } -->

<!-- # extract eukaryotic sequences if found -->

<!-- euks <- subset_taxa(physeq.filtered, Domain == "Eukaryota") -->

<!-- tax_table(euks) %>% as.data.frame %>% knitr::kable() -->

<!-- ``` -->

<!-- ```{r } -->

<!-- tmp <- sample_sums(euks) -->

<!-- tmp[ tmp > 0 ] -->

<!-- ``` -->

<!-- ```{r } -->

<!-- physeq.filtered <- subset_taxa(physeq.filtered, !(Domain == 'Eukaryota')) -->

<!-- ``` -->

### Organelle 16S (mitochondria, chloroplast)

Next we check for organelle 16S. These could arise in chloroplast or mitochondria. They are classified under different rank criteria in Silva, so we need to check for them separately.

Any hits for chloroplast? These are found under the `Class` rank.

```{r }
table(tax_table(physeq.filtered)[,'Order'])['Chloroplast']

df.chloroplast = data.frame(table(tax_table(physeq.filtered)[,'Order'])['Chloroplast']) %>% setNames(c("Count"))
``` 

`r df.chloroplast$Count` chloroplast sequence was found.

```{r}
chloros <- subset_taxa(physeq.filtered, Order == 'Chloroplast')
#sample_sums(chloros) %>% magrittr::extract(. > 0)
```

Any mitochondrial sequences?

```{r }
table(tax_table(physeq.filtered)[,'Family'])['Mitochondria']

df.mitochondria = data.frame(table(tax_table(physeq.filtered)[,'Family'])['Mitochondria']) %>% setNames(c("Count"))
```

`r df.mitochondria` mitochondrial sequences were found.

```{r }
mitos <- subset_taxa(physeq.filtered, Family == 'Mitochondria')
#sample_sums(mitos) %>% magrittr::extract(. > 0)
```

We remove these at this step.

```{r }
# remove negative control samples that aren't part of the analysis (water, Zymo)
#physeq.filtered <- subset_samples(physeq, Trt != 'Negative_control') 

# remove mitochondria
physeq.filtered <- subset_taxa(physeq.filtered, is.na(Family) | Family != 'Mitochondria')

# remove chloroplast
physeq.filtered <- subset_taxa(physeq.filtered, is.na(Order) | Order != 'Chloroplast')

#physeq.filtered
```

## Remove taxa with 0 counts

Do we need to filter out any taxa with 0 counts? Let's check how many have taxonomic sums equal to 0

```{r }
table(taxa_sums(physeq.filtered) == 0)
```

None!

<!-- Removing these below. -->

<!-- ```{r } -->

<!-- physeq.filtered <- prune_taxa(taxa_sums(physeq.filtered) > 0, physeq.filtered) -->

<!-- physeq.filtered -->

<!-- ``` -->

How about the number of samples who have 0 counts?

```{r }
table(sample_sums(physeq.filtered) == 0)
```

No samples with zero counts after filtering in the above steps. No filtering needed.

```{r }
# sample_data(physeq)[sample_sums(physeq.filtered) == 0]
```

```{r }
# physeq.filtered <- prune_samples(sample_sums(physeq.filtered) > 0, physeq)
# physeq.filtered
```

<!-- ## Contaminant removal from control samples -->

<!-- Using a function called decontam to see if any of the negative control reads are recognized as contamination. This function uses the prevalence of taxa in the negative control compared to others to distinguish potential contaminant. -->

<!-- ```{r } -->
<!-- # These steps use the decontam library -->

<!-- df.contam <- as.data.frame(sample_data(physeq.filtered)) -->
<!-- df.contam$LibrarySize <- sample_sums(physeq.filtered) -->

<!-- sample_data(physeq.filtered)$is.neg <- sample_data(physeq.filtered)$Control == "Negative" -->
<!-- contamdf.prev <- isContaminant(physeq.filtered, -->
<!--                                method = "prevalence", -->
<!--                                neg = "is.neg", -->
<!--                                threshold = 0.05) -->

<!-- table(contamdf.prev$contaminant) -->
<!-- ``` -->

<!-- Which ones are contaminants? -->

<!-- ```{r } -->
<!-- keep <- contamdf.prev$contaminant == TRUE -->

<!-- contamdf.prev[keep,] %>% kable() -->

<!-- ``` -->

<!-- Based on the threshold of p < 0.05 we are seeing some contaminants showing up; how prevalent are they in the overall samples? -->

<!-- ```{r } -->
<!-- ps.neg <- prune_samples( -->
<!--   sample_data(physeq.filtered)$Control == "Negative", physeq.filtered) -->
<!-- ps.neg.presence <- transform_sample_counts(ps.neg, function(abund) 1*(abund > 0)) -->

<!-- ps.pos <- prune_samples( -->
<!--   sample_data(physeq.filtered)$Control == "Sample", physeq.filtered) -->
<!-- ps.pos.presence <- transform_sample_counts(ps.pos, function(abund) 1*(abund > 0)) -->

<!-- df.pres <- data.frame( -->
<!--   prevalence.pos = taxa_sums(ps.pos.presence), -->
<!--   prevalence.neg = taxa_sums(ps.neg.presence), -->
<!--   contam.prev = contamdf.prev$contaminant) -->

<!-- ggplot(data = df.pres, aes(x=prevalence.neg, y=prevalence.pos, color=contam.prev)) + -->
<!--   geom_point() -->
<!-- ``` -->

<!-- The contaminants don't seem to be in the other samples. -->


```{r }
# physeq.filtered <- prune_taxa(!contamdf.prev$contaminant, physeq.filtered)
# physeq.filtered
```

## Count histogram

We will plot a histogram of sample counts to show the overall distribution.

```{r}
hist(sample_sums(physeq.filtered), breaks = 50, ylab="Frequency (number of samples)", xlab = "Number of (microbial) sequences / sample")
```


## Basic overview

The filtered phyloseq object is saved to *"results/physeq.filtered.RDS"*

Let's look at the filtered data. We have `r ntaxa(physeq.filtered)` taxa and `r nsamples(physeq.filtered)` samples.

```{r}
physeq.filtered
```

Here are the sample variables for analysis:

```{r }
sample_variables(physeq.filtered)
```

Note these include data from read tracking.

Here is a simple summary of the phylogenetic tree (this is midpoint-rooted in the workflow) with the top 50 most abundant ASVs.

```{r }
# get the top 50 taxa based on overall taxa sums
myTaxa1 <- names(sort(taxa_sums(physeq.filtered), decreasing = TRUE))[1:50]

# generate a tmp instance with only those taxa
ex0 = prune_taxa(myTaxa1, physeq.filtered)

# plot with only those, labeling as needed
plot_tree(ex0, label.tips = 'Family',
          ladderize = "left",
          justify = "left",
          color = "group",text.size=3,
          )+
   scale_color_manual(values = dittoSeq::dittoColors()[1:20])
```

```{r}
saveRDS(physeq.filtered, 'results/physeq.filtered.RDS')
```
